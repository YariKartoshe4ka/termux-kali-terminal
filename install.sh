#!/data/data/com.termux/files/usr/bin/bash

TERMUX_ROOT="/data/data/com.termux/files"
OUTPUT_PIPE="/dev/null" # You can change it to /dev/stdout to enable output
ZSHRC_BASE64_ENCODED=""


backup_if_exists() {
    # $1 - Name of file, $2 - Path to file
    if [ -f $2 ] || [ -d $2 ]; then
        echo "  $1 already exists, backupping it and replacing with new one"
        mv $2 $2.bak &>$OUTPUT_PIPE
    fi
}


if [ $EUID -eq 0 ]; then
    echo "Run this script as user, not root!"
    exit 2
fi


# Start installation process
echo "Installation process started!"
echo "============================="


# Install zsh and git via apt
echo "- Install zsh and git ..."

apt install zsh git --yes &>$OUTPUT_PIPE


# Setup .zshrc file for user
echo "- Setup .zshrc file for user ..."

backup_if_exists "File" $HOME/.zshrc
base64 -d <<< $ZSHRC_BASE64_ENCODED > $HOME/.zshrc


# Setup .zshrc file for root
if which su &>$OUTPUT_PIPE; then
    echo "- Setup .zshrc file for root ..."

    mkdir -p $HOME/.suroot &>$OUTPUT_PIPE
    backup_if_exists "File" $HOME/.suroot/.zshrc
    base64 -d <<< $ZSHRC_BASE64_ENCODED > $HOME/.suroot/.zshrc
fi


# Setup modules for zsh
echo "- Install additional plugins for zsh ..."

backup_if_exists "Plugin" $TERMUX_ROOT/usr/share/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $TERMUX_ROOT/usr/share/zsh-syntax-highlighting &>$OUTPUT_PIPE

backup_if_exists "Plugin" $TERMUX_ROOT/usr/share/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-autosuggestions.git $TERMUX_ROOT/usr/share/zsh-autosuggestions &>$OUTPUT_PIPE


# Change login shell to zsh
echo "- Change login shell to zsh ..."

chsh -s zsh &>$OUTPUT_PIPE


# Setup Fira Code Regular font
echo "- Setup custom font ..."

backup_if_exists "Custom font" $HOME/.termux/font.ttf
curl -L https://github.com/tonsky/FiraCode/releases/download/5.2/Fira_Code_v5.2.zip -o $TMPDIR/firacode.zip &>$OUTPUT_PIPE
unzip $TMPDIR/firacode.zip -d $TMPDIR &>$OUTPUT_PIPE
mkdir -p $HOME/.termux &>$OUTPUT_PIPE
mv $TMPDIR/ttf/FiraCode-Regular.ttf $HOME/.termux/font.ttf &>$OUTPUT_PIPE



# End installation process
echo "================================================"
echo "      Installation process completed!"
echo "Please, re-open Termux to see your new terminal!"
